package com.cleartrip.common;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.testng.TestNG;

public class Main extends TestNG {

	private static String env;

	public static void main(String[] args) {
		String testType = "";
		String product = "";
		String modules = "";
		String retryFailed="";

		if (args.length == 0) {
			try {
				env = PropertyUtil.getCommonData("env");
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (args.length == 1) {
			env = args[0];
		} else if (args.length == 2) {
			env = args[0];
			testType = args[1];
		} else if (args.length == 3) {
			env = args[0];
			testType = args[1];
			product = args[2];
		} else if (args.length == 4) {
			env = args[0];
			testType = args[1];
			product = args[2];
			modules = args[3];
		}else if (args.length == 5) {
			env = args[0];
			testType = args[1];
			product = args[2];
			modules = args[3];
			retryFailed=args[4];
		}

		// TODO
		String testSuit = "";

		
		
		if (product != null && !product.isEmpty() && retryFailed.equalsIgnoreCase("")) {
			testSuit = System.getProperty("user.dir") + File.separator + product.toLowerCase() + ".xml";
		}else if (retryFailed.equals("true")){
			testSuit = System.getProperty("user.dir") + File.separator + "test-output"+ File.separator + "testng-failed..xml";
		}
		
		else {
			testSuit = System.getProperty("user.dir") + File.separator + "testng.xml";
		} 

		String[] testNgRunArgs = new String[args.length];

		if (args.length == 0) {
			testNgRunArgs = new String[args.length + 1];
			testNgRunArgs[0] = testSuit;
		} else if (args.length == 1) {
			testNgRunArgs = new String[args.length];
			testNgRunArgs[0] = testSuit;
		} else if (args.length == 2) {
			testNgRunArgs = new String[args.length + 1];
			testNgRunArgs[0] = testSuit;
			testNgRunArgs[1] = "-groups";
			testNgRunArgs[2] = testType;
		} else if (args.length == 4) {
			testNgRunArgs = new String[args.length + 1];
			testNgRunArgs[0] = testSuit;
			testNgRunArgs[1] = "-groups";
			testNgRunArgs[2] = testType;
			testNgRunArgs[3] = "-testnames";
			testNgRunArgs[4] = modules;
		} else {
			testNgRunArgs = new String[args.length];
			testNgRunArgs[0] = testSuit;
			testNgRunArgs[1] = "-groups";
			testNgRunArgs[2] = testType;
		}

		setTestRailProperties();

		System.out.println(testNgRunArgs.toString());
		TestNG.main(testNgRunArgs);

	}

	private static void setTestRailProperties() {
		/*
		 * testRail.enabled= testRail.url= testRail.username= testRail.password=
		 * testRail.testPlanId=
		 */

		Properties p = null;

		System.setProperties(p);
	}
	
		

	public static String getEnv(String s) throws IOException {

		String envPlaceHolderValue = null;
		if (env == null) {
			env = PropertyUtil.getCommonData("env");
		}	
			switch (env.toLowerCase()) {
			case "prod":
				envPlaceHolderValue = "www";
				break;
			case "beta":
				envPlaceHolderValue = "beta";
				break;
			case "hf":
				envPlaceHolderValue = "hf";
				break;
			case "dev":
				envPlaceHolderValue = "dev";
				break;
			case "qa":
				envPlaceHolderValue = "qa2";
				break;
			case "staging":
				envPlaceHolderValue = "staging";
				break;

			default:
				throw new IllegalArgumentException(
						"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
			}
		return envPlaceHolderValue;

	}

	public static String getEnv(String string, boolean isApiCall) throws IOException {
		String envPlaceHolderValue = null;
		if (env == null) {
			env = PropertyUtil.getCommonData("env");
			System.out.println(PropertyUtil.getCommonData("env"));
		}
			switch (env.toLowerCase()) {
			case "prod":
				envPlaceHolderValue = isApiCall ? "api" : "www";
				break;
			case "beta":
				envPlaceHolderValue = isApiCall ? "apibeta" : "beta";
				break;
			case "hf":
				envPlaceHolderValue = isApiCall ? "apihf" : "hf";
				break;
			case "dev":
				envPlaceHolderValue = isApiCall ? "apidev" : "dev";
				break;
			case "qa":
				envPlaceHolderValue = isApiCall ? "apiqa" : "qa2";
				break;
			case "staging":
				envPlaceHolderValue = isApiCall ? "staging" : "staging";
				break;

			default:
				throw new IllegalArgumentException(
						"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
			}
		return envPlaceHolderValue;
	}
	
	
public static String agencygetDomain(String string) throws IOException {
		
		String domainName = null;
		
		if (env == null) {
			env = PropertyUtil.getCommonData("env");
		}	
			switch (env.toLowerCase()) {
			case "prod":
				domainName = "automationproduction";
				break;
			case "beta":
				domainName = "automationproduction";
				break;
			case "hf":
				domainName = "hf";
				break;
			case "dev":
				domainName = "dev";
				break;
			case "qa":
				domainName = "manit";
				break;
			case "staging":
				domainName = "staging";
				break;

			default:
				throw new IllegalArgumentException(
						"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
			}
			
		return domainName;
		

	}
		

public static String corpgetDomain(String string) throws IOException {
	
	String domainName = null;
	
	
	if (env == null) {
		env = PropertyUtil.getCommonData("env");
	}	
		switch (env.toLowerCase()) {
		case "prod":
			domainName = "automation";
			break;
		
		case "beta":
			domainName = "qademo";
			break;
		
		case "hf":
			domainName = "automationhf";
			break;
		
		case "dev":
			domainName = "dev";
			break;
		
		case "qa":
			domainName = "demo";
			break;
		
		case "staging":
			domainName = "staging";
			break;

		default:
			throw new IllegalArgumentException(
					"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
		}
		
	return domainName;
	
}

public static String corpAEgetDomain(String string) throws IOException {
	
	String domainName = null;

	
	if (env == null) {
		env = PropertyUtil.getCommonData("env");
	}	
		switch (env.toLowerCase()) {
		case "prod":
			domainName = "cltpdomainprod1";
			break;
		
		case "beta":
			domainName = "qademo";
			break;
		
		case "hf":
			domainName = "automationhf";
			break;
		
		case "dev":
			domainName = "dev";
			break;
		
		case "qa":
			domainName = "automationqa2ae";
			break;
		
		case "staging":
			domainName = "staging";
			break;

		default:
			throw new IllegalArgumentException(
					"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
		}
		
	return domainName;
	
}




public static String corpSAgetDomain(String string) throws IOException {
	
	String domainName = null;

	
	if (env == null) {
		env = PropertyUtil.getCommonData("env");
	}	
		switch (env.toLowerCase()) {
		case "prod":
			domainName = "cltpdomainprod1";
			break;
		
		case "beta":
			domainName = "qademo";
			break;
		
		case "hf":
			domainName = "automationhf";
			break;
		
		case "dev":
			domainName = "dev";
			break;
		
		case "qa":
			domainName = "automationqa2ae";
			break;
		
		case "staging":
			domainName = "staging";
			break;

		default:
			throw new IllegalArgumentException(
					"Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
		}
		
	return domainName;
	
}



}
