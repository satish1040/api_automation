package com.cleartrip.corporate.air.search;

import static com.jayway.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;
import java.io.IOException;
import java.util.HashMap;

import org.apache.http.client.protocol.RequestDefaultHeaders;
//import java.util.concurrent.TimeUnit;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;
import com.cleartrip.air.common.AirCommonUtil;
import com.cleartrip.common.RestUtil;
import com.cleartrip.common.dataproviders.AgencyAirDataProvider;
import com.cleartrip.common.dataproviders.AirInDataProvider;
import com.cleartrip.common.dataproviders.CorporateAirDataProvider;
import com.jayway.restassured.RestAssured;
import com.jayway.restassured.parsing.Parser;
import com.jayway.restassured.response.Response;


public class CorpDomMultiCitySearchTest extends AirCommonUtil{

	@Test(groups = {"Regression","Search"},dataProviderClass=CorporateAirDataProvider.class, dataProvider="dommcsssearch")
	public void Corp_Dom_mc_Search(HashMap<String, Object> params) throws IOException{
		//test
		Response resp;
		RestAssured.defaultParser = Parser.JSON;
		String onwarddate1=putDate(getAirData("onwardsearch_date"));
		String onwarddate2=putDate(getAirData("returnsearch_date"));
		
	try {
		
		HashMap<String, Object> commonUrlProperties = new HashMap<String,Object>();
		commonUrlProperties = corpAir("mcflightsearch", "get", false);
		
		HashMap<String, Object> headers = new HashMap<String,Object>();
		
		params.put("depart_date_1",onwarddate1);
		params.put("depart_date_2",onwarddate2);
		headers.put("Referer", "https://");
		
		
		resp = RestUtil.corphttpMethod(params,commonUrlProperties,headers);
		Assert.assertEquals(resp.statusCode(),200, " + + " + Thread.currentThread().getStackTrace()[1].getMethodName() + " is FAILED");
		
		String dfd = resp.then().extract().path("fare.1.CORP.dfd");
		System.out.println(dfd);
		
		String fareKey = resp.then().extract().path("fare.1.CORP."+dfd+".fk");
		Reporter.log("fareKey: "+" - " +fareKey,true);

		String price = resp.then().extract().path("fare.1.CORP."+dfd+".pr").toString();
		Reporter.log("price: "+" - " +price,true);
		
							
		Reporter.log(Thread.currentThread().getStackTrace()[1].getMethodName() + " is completed",true);
		
    }catch (Exception e)
	
	{
    	Reporter.log(e.getMessage() + Thread.currentThread().getStackTrace()[1].getMethodName() + " is FAILED",true);
        Assert.fail("*****  REPONSE RETURNED HAVE NO RESULTS *****");
    }
}}

