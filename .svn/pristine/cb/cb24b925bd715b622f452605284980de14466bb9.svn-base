package com.cleartrip.local.common;

import static com.jayway.restassured.RestAssured.get;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import org.apache.http.HttpStatus;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.testng.Assert;
import org.testng.Reporter;

import com.cleartrip.common.Main;
import com.cleartrip.common.PropertyUtil;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class LocalCommonUtil extends PropertyUtil {
    
   public static HashMap<String, Object> commonLocalExtApi(String url, String httpmethod, boolean isExtApi) throws IOException {

		HashMap<String, Object> map = new HashMap<String, Object>();

		map.put("env", Main.getEnv("env"));
		map.put("baseUrl", getLocalExtapiData("baseurl"));
		map.put("domain", getLocalExtapiData("domain"));
		map.put("url", getLocalExtapiUrl(url));
		map.put("httpMethod", httpmethod);
		map.put("protocol", getLocalExtapiData("protocol"));
		if (isExtApi) {
			
			map.put("api", true);
		} else {
			
			map.put("api", false);
		}
		return map;

	}
	
	public static HashMap<String, Object> commonLocal(String url, String httpmethod, boolean isExtApi) throws IOException {

		HashMap<String, Object> map = new HashMap<String, Object>();

		map.put("env", Main.getEnv("env"));
		map.put("baseUrl", getLocalData("baseurl"));
		map.put("domain", getLocalData("domain"));
		map.put("city", getLocalData("city"));
		map.put("url", getLocalUrl(url));
		map.put("httpMethod", httpmethod);
		map.put("protocol", getLocalData("protocol"));
        if (isExtApi) {
			
			map.put("api", true);
		} else {
			
			map.put("api", false);
		}
		return map;

	}

    
		
 public HashMap<String, Object> travellerDetails(){
   
     HashMap<String, Object> travellers = new HashMap<String, Object>();
	
	travellers.put("title", "Mr");
	travellers.put("firstName", "Test");
	travellers.put("lastName", "Booking");
	travellers.put("userName", "automation_cltp@cleartrip.com");
	travellers.put("mobileNumber", "7259345154");
	travellers.put("bookingRef", "test123");
     
     return travellers;
     
 }	
 
 public String dateSelected(){
		
	 LocalDate currentDate = LocalDate.now();
	 int day;
	 int year;
	 int month = currentDate.getMonthValue();
		if(month == 12){
		  year = currentDate.getYear()+1;
		  day = 01;
		  month = 01;
		}else{
			day = currentDate.getDayOfMonth();
			month = currentDate.getMonthValue();
			year = currentDate.getYear();
	    }
		String date = day+"-"+month+"-"+year;  
	return date;

 }
 
 public HashMap<String, Object> paymentDetails(String paymentMode){
	 
	 
	 
	 
	 return null;
	 
 }
 
 
	

 /**
  * Method for Fetching URL from HTML
  * @param url
  * @param module
  * @param city
  * @return
 * @throws IOException 
  */
public static ArrayList<String> FetchHtmlUrl(String url,String module,String city) throws IOException {

		ArrayList<String> list = new ArrayList<>();
		String path = "/"+module+"/"+city;
			Document doc = Jsoup.connect(url).get();
			Elements ele = doc.select("a");
			ele.size();
			for (Element e : ele) {
				if (e.attr("href").contains(path)) {
					list.add(e.attr("href").substring(path.length(), e.attr("href").length()));
				}
		}

		return list;

	}

public void localApiGetCall(String uri) {
	int statusCode = get(uri).getStatusCode();
	Reporter.log(uri+" :: is giving status "+statusCode,true);
	Assert.assertTrue(statusCode==HttpStatus.SC_OK,uri+" is giving status "+statusCode);

}

}
