package com.cleartrip.common;

import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.testng.TestNG;

public class Main extends TestNG {

    private static String env;

    public static void main(String[] args) {
	String testType = "";
	String product = "";
	String modules = "";

	if (args.length == 0) {
	    env = "prod";
	} else if (args.length == 1) {
	    env = args[0];
	} else if (args.length == 2) {
	    env = args[0];
	    testType = args[1];
	} else if (args.length == 3) {
	    env = args[0];
	    testType = args[1];
	    product = args[2];
	} else if (args.length == 4) {
	    env = args[0];
	    testType = args[1];
	    product = args[2];
	    modules = args[3];
	}

	// TODO
	String testSuit = "";
	
	if (product!=null && !product.isEmpty()) {
	    testSuit = System.getProperty("user.dir") + File.separator + product.toLowerCase()+".xml";
	}else {
	    testSuit = System.getProperty("user.dir") + File.separator+"testng.xml";
	}
	

	String[] testNgRunArgs = new String[args.length];

	if (args.length == 0) {
	    testNgRunArgs = new String[args.length + 1];
	    testNgRunArgs[0] = testSuit;
	} else if (args.length == 1) {
	    testNgRunArgs = new String[args.length];
	    testNgRunArgs[0] = testSuit;
	} else if (args.length == 2) {
	    testNgRunArgs = new String[args.length + 1];
	    testNgRunArgs[0] = testSuit;
	    testNgRunArgs[1] = "-groups";
	    testNgRunArgs[2] = testType;
	} else if (args.length == 4) {
	    testNgRunArgs = new String[args.length + 1];
	    testNgRunArgs[0] = testSuit;
	    testNgRunArgs[1] = "-groups";
	    testNgRunArgs[2] = testType;
	    testNgRunArgs[3] = "-testnames";
	    testNgRunArgs[4] = modules;
	} else {
	    testNgRunArgs = new String[args.length];
	    testNgRunArgs[0] = testSuit;
	    testNgRunArgs[1] = "-groups";
	    testNgRunArgs[2] = testType;
	}

	setTestRailProperties();
	
	System.out.println(testNgRunArgs.toString());
	TestNG.main(testNgRunArgs);

    }

    private static void setTestRailProperties() {
	/*
	 * testRail.enabled= 
	 * testRail.url= 
	 * testRail.username= 
	 * testRail.password=
	 * testRail.testPlanId=
	 */
	
	Properties p = null;
	
	System.setProperties(p);
    }

    public static String getEnv(String s) {

	String envPlaceHolderValue = null;
	switch (env.toLowerCase()) {
	case "prod":
	    envPlaceHolderValue = "www";
	    break;
	case "beta":
	    envPlaceHolderValue = "beta";
	    break;
	case "hf":
	    envPlaceHolderValue = "hf";
	    break;
	case "dev":
	    envPlaceHolderValue = "dev";
	    break;
	case "qa":
	    envPlaceHolderValue = "qa2";
	    break;
	case "staging":
	    envPlaceHolderValue = "staging";
	    break;
	/*
	 * case " ": envPlaceHolderValue = "qa2"; break;
	 */
	default:
	    throw new IllegalArgumentException(
		    "Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
	}

	return envPlaceHolderValue;

    }

    public static String getEnv(String string, boolean isApiCall) {
	String envPlaceHolderValue = null;
	switch (env.toLowerCase()) {
	case "prod":
	    envPlaceHolderValue = isApiCall ? "api" : "www";
	    break;
	case "beta":
	    envPlaceHolderValue = isApiCall ? "apibeta" : "beta";
	    break;
	case "hf":
	    envPlaceHolderValue = isApiCall ? "apihf" : "hf";
	    break;
	case "dev":
	    envPlaceHolderValue = isApiCall ? "apidev" : "dev";
	    break;
	case "qa":
	    envPlaceHolderValue = isApiCall ? "apiqa" : "qa2";
	    break;
	case "staging":
	    envPlaceHolderValue = isApiCall ? "staging" : "staging";
	    break;
	
	default:
	    throw new IllegalArgumentException(
		    "Invalid test run environment. env = '" + env + "'. Valid value are QA, Prod, beta, hf, dev ");
	}

	return envPlaceHolderValue;
    }

}
